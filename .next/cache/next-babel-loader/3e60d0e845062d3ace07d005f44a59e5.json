{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nexport const useSignupForm = callback => {\n  const formFields = {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  };\n\n  const initErrors = () => {\n    let errors = _objectSpread({}, formFields);\n\n    for (const key in formFields) {\n      errors[key] = `${key} can not be empty`;\n    }\n\n    return errors;\n  };\n\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState(formFields);\n  const {\n    0: errors,\n    1: setErrors\n  } = useState(initErrors());\n  const {\n    0: isShowError,\n    1: showError\n  } = useState(false);\n\n  const validateField = (fieldName, value, fieldValidationErrors) => {\n    if (value === '') {\n      fieldValidationErrors[fieldName] = `${fieldName} can not be empty`;\n    } else {\n      switch (fieldName) {\n        case 'username':\n          const isTooShort = value.length < 3;\n          const isTooLong = value.length > 10;\n          fieldValidationErrors.username = isTooShort ? 'Nono too short!' : isTooLong ? 'Nono too long!' : '';\n          break;\n\n        case 'email':\n          const isEmailValid = value.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\n          fieldValidationErrors.email = isEmailValid ? '' : 'This email type is invalid';\n          break;\n\n        case 'password':\n          const isPasswordValid = value.length > 6;\n          fieldValidationErrors.password = isPasswordValid ? '' : 'Your password length must be longer than 6';\n          break;\n\n        case 'confirmPassword':\n          const isCPasswordValid = value === inputs.password;\n          fieldValidationErrors.confirmPassword = isCPasswordValid ? '' : 'Both password need to be the same';\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    setErrors(fieldValidationErrors);\n  };\n\n  const isFormValid = () => {\n    const errorsArray = Object.values(errors);\n\n    for (let i = 0; i < errorsArray.length; i++) {\n      if (errorsArray[i]) return false;\n    }\n\n    return true;\n  };\n\n  const handleSubmit = event => {\n    if (event) event.preventDefault();\n    showError(true);\n    if (isFormValid()) callback(inputs);\n  };\n\n  const handleInputChange = event => {\n    event.persist();\n    const name = event.target.name;\n    const value = event.target.value;\n\n    let fieldValidationErrors = _objectSpread({}, errors);\n\n    setInputs(inputs => _objectSpread({}, inputs, {\n      [name]: value\n    }));\n    validateField(name, value, fieldValidationErrors);\n  };\n\n  return {\n    inputs,\n    handleSubmit,\n    handleInputChange,\n    errors,\n    isShowError\n  };\n};","map":{"version":3,"sources":["/Users/zachchang/programing/solace/src/utils/customHooks.js"],"names":["useState","useSignupForm","callback","formFields","username","email","password","confirmPassword","initErrors","errors","key","inputs","setInputs","setErrors","isShowError","showError","validateField","fieldName","value","fieldValidationErrors","isTooShort","length","isTooLong","isEmailValid","match","isPasswordValid","isCPasswordValid","isFormValid","errorsArray","Object","values","i","handleSubmit","event","preventDefault","handleInputChange","persist","name","target"],"mappings":"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","sourcesContent":["import { useState } from  'react';\n\nexport const useSignupForm = (callback) => {\n    const formFields = {\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: ''\n    };\n    const initErrors = () => {\n        let errors = {...formFields};\n        for (const key in formFields) {\n            errors[key] = `${key} can not be empty`\n        }\n        return errors;\n    }\n    const [inputs, setInputs] = useState(formFields);\n    const [errors, setErrors] = useState(initErrors());\n    const [isShowError, showError] = useState(false);\n\n    const validateField = (fieldName, value, fieldValidationErrors) => {\n        if (value === '') {\n            fieldValidationErrors[fieldName] = `${fieldName} can not be empty`;    \n        } else {\n            switch (fieldName) {\n                case 'username':\n                    const isTooShort = value.length < 3;\n                    const isTooLong = value.length > 10;\n                    fieldValidationErrors.username = isTooShort ? 'Nono too short!' : isTooLong ? 'Nono too long!' : '';\n                    break;\n                case 'email':\n                    const isEmailValid = value.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\n                    fieldValidationErrors.email = isEmailValid ? '' : 'This email type is invalid';\n                    break;\n                case 'password':\n                    const isPasswordValid = value.length > 6;\n                    fieldValidationErrors.password = isPasswordValid ? '' : 'Your password length must be longer than 6';\n                    break;\n                case 'confirmPassword':\n                    const isCPasswordValid = value === inputs.password;\n                    fieldValidationErrors.confirmPassword = isCPasswordValid ? '' : 'Both password need to be the same';\n                    break;\n                default:\n                    break;\n            }\n        }\n        setErrors(fieldValidationErrors);\n    }\n\n    const isFormValid = () => {\n        const errorsArray = Object.values(errors);\n        for (let i = 0; i < errorsArray.length; i++) {\n            if (errorsArray[i]) return false;\n        }\n        return true;\n    }\n\n    const handleSubmit = (event) => {\n        if (event) event.preventDefault();\n        showError(true);\n        if (isFormValid()) callback(inputs);\n    }\n\n    const handleInputChange = (event) => {\n        event.persist();\n        const name = event.target.name;\n        const value = event.target.value;\n        let fieldValidationErrors = {...errors};\n        setInputs(inputs => (\n            {\n                ...inputs,\n                [name]: value\n            }\n        ));\n        validateField(name, value, fieldValidationErrors);\n    }\n\n    return { inputs, handleSubmit, handleInputChange, errors, isShowError };\n}\n"]},"metadata":{},"sourceType":"module"}