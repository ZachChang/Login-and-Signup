{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nexport var useSignupForm = function useSignupForm(callback) {\n  var formFields = {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  };\n\n  var initErrors = function initErrors() {\n    var errors = _objectSpread({}, formFields);\n\n    for (var key in formFields) {\n      errors[key] = \"\".concat(key, \" can not be empty\");\n    }\n\n    return errors;\n  };\n\n  var _useState = useState(formFields),\n      inputs = _useState[0],\n      setInputs = _useState[1];\n\n  var _useState2 = useState(initErrors()),\n      errors = _useState2[0],\n      setErrors = _useState2[1];\n\n  var _useState3 = useState(false),\n      isShowError = _useState3[0],\n      showError = _useState3[1];\n\n  var validateField = function validateField(fieldName, value, fieldValidationErrors) {\n    if (value === '') {\n      fieldValidationErrors[fieldName] = \"\".concat(fieldName, \" can not be empty\");\n    } else {\n      switch (fieldName) {\n        case 'username':\n          var isTooShort = value.length < 3;\n          var isTooLong = value.length > 10;\n          fieldValidationErrors.username = isTooShort ? 'Nono too short!' : isTooLong ? 'Nono too long!' : '';\n          break;\n\n        case 'email':\n          var isEmailValid = value.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\n          fieldValidationErrors.email = isEmailValid ? '' : 'This email type is invalid';\n          break;\n\n        case 'password':\n          var isPasswordValid = value.length > 6;\n          fieldValidationErrors.password = isPasswordValid ? '' : 'Your password length must be longer than 6';\n          break;\n\n        case 'confirmPassword':\n          var isCPasswordValid = value === inputs.password;\n          fieldValidationErrors.confirmPassword = isCPasswordValid ? '' : 'Both password need to be the same';\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    setErrors(fieldValidationErrors);\n  };\n\n  var isFormValid = function isFormValid() {\n    var errorsArray = Object.values(errors);\n\n    for (var i = 0; i < errorsArray.length; i++) {\n      if (errorsArray[i]) return false;\n    }\n\n    return true;\n  };\n\n  var handleSubmit = function handleSubmit(event) {\n    if (event) event.preventDefault();\n    showError(true);\n    if (isFormValid()) callback(inputs);\n  };\n\n  var handleInputChange = function handleInputChange(event) {\n    event.persist();\n    var name = event.target.name;\n    var value = event.target.value;\n\n    var fieldValidationErrors = _objectSpread({}, errors);\n\n    setInputs(function (inputs) {\n      return _objectSpread({}, inputs, _defineProperty({}, name, value));\n    });\n    validateField(name, value, fieldValidationErrors);\n  };\n\n  return {\n    inputs: inputs,\n    handleSubmit: handleSubmit,\n    handleInputChange: handleInputChange,\n    errors: errors,\n    isShowError: isShowError\n  };\n};","map":{"version":3,"sources":["/Users/zachchang/programing/solace/src/utils/customHooks.js"],"names":["useState","useSignupForm","callback","formFields","username","email","password","confirmPassword","initErrors","errors","key","inputs","setInputs","setErrors","isShowError","showError","validateField","fieldName","value","fieldValidationErrors","isTooShort","length","isTooLong","isEmailValid","match","isPasswordValid","isCPasswordValid","isFormValid","errorsArray","Object","values","i","handleSubmit","event","preventDefault","handleInputChange","persist","name","target"],"mappings":"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","sourcesContent":["import { useState } from  'react';\n\nexport const useSignupForm = (callback) => {\n    const formFields = {\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: ''\n    };\n    const initErrors = () => {\n        let errors = {...formFields};\n        for (const key in formFields) {\n            errors[key] = `${key} can not be empty`\n        }\n        return errors;\n    }\n    const [inputs, setInputs] = useState(formFields);\n    const [errors, setErrors] = useState(initErrors());\n    const [isShowError, showError] = useState(false);\n\n    const validateField = (fieldName, value, fieldValidationErrors) => {\n        if (value === '') {\n            fieldValidationErrors[fieldName] = `${fieldName} can not be empty`;    \n        } else {\n            switch (fieldName) {\n                case 'username':\n                    const isTooShort = value.length < 3;\n                    const isTooLong = value.length > 10;\n                    fieldValidationErrors.username = isTooShort ? 'Nono too short!' : isTooLong ? 'Nono too long!' : '';\n                    break;\n                case 'email':\n                    const isEmailValid = value.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\n                    fieldValidationErrors.email = isEmailValid ? '' : 'This email type is invalid';\n                    break;\n                case 'password':\n                    const isPasswordValid = value.length > 6;\n                    fieldValidationErrors.password = isPasswordValid ? '' : 'Your password length must be longer than 6';\n                    break;\n                case 'confirmPassword':\n                    const isCPasswordValid = value === inputs.password;\n                    fieldValidationErrors.confirmPassword = isCPasswordValid ? '' : 'Both password need to be the same';\n                    break;\n                default:\n                    break;\n            }\n        }\n        setErrors(fieldValidationErrors);\n    }\n\n    const isFormValid = () => {\n        const errorsArray = Object.values(errors);\n        for (let i = 0; i < errorsArray.length; i++) {\n            if (errorsArray[i]) return false;\n        }\n        return true;\n    }\n\n    const handleSubmit = (event) => {\n        if (event) event.preventDefault();\n        showError(true);\n        if (isFormValid()) callback(inputs);\n    }\n\n    const handleInputChange = (event) => {\n        event.persist();\n        const name = event.target.name;\n        const value = event.target.value;\n        let fieldValidationErrors = {...errors};\n        setInputs(inputs => (\n            {\n                ...inputs,\n                [name]: value\n            }\n        ));\n        validateField(name, value, fieldValidationErrors);\n    }\n\n    return { inputs, handleSubmit, handleInputChange, errors, isShowError };\n}\n"]},"metadata":{},"sourceType":"module"}