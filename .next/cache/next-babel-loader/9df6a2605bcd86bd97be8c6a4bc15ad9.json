{"ast":null,"code":"import config from '../config';\nconst token = 'mockToken';\nexport default {\n  register(payload) {\n    return new Promise((resolve, reject) => {\n      fetch(`${config.apiRecord.domain}/register`, {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          'Authorization': token\n        },\n        body: JSON.stringify({\n          payload\n        })\n      }).then(res => {\n        res.status === 200 ? resolve(res.json()) : reject(res);\n      }).catch(err => reject(err));\n    });\n  }\n\n};","map":{"version":3,"sources":["/Users/zachchang/programing/solace/src/utils/apiUtility.js"],"names":["config","token","register","payload","Promise","resolve","reject","fetch","apiRecord","domain","method","headers","body","JSON","stringify","then","res","status","json","catch","err"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,WAAnB;AACA,MAAMC,KAAK,GAAG,WAAd;AAGA,eAAe;AACXC,EAAAA,QAAQ,CAACC,OAAD,EAAU;AACd,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCC,MAAAA,KAAK,CAAE,GAAEP,MAAM,CAACQ,SAAP,CAAiBC,MAAO,WAA5B,EACD;AACIC,QAAAA,MAAM,EAAE,MADZ;AAEIC,QAAAA,OAAO,EAAE;AAAE,0BAAgB,kBAAlB;AAAsC,2BAAiBV;AAAvD,SAFb;AAGIW,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBX,UAAAA;AADiB,SAAf;AAHV,OADC,CAAL,CAQEY,IARF,CAQOC,GAAG,IAAI;AACVA,QAAAA,GAAG,CAACC,MAAJ,KAAe,GAAf,GAAqBZ,OAAO,CAACW,GAAG,CAACE,IAAJ,EAAD,CAA5B,GAA2CZ,MAAM,CAACU,GAAD,CAAjD;AACH,OAVD,EAUGG,KAVH,CAUSC,GAAG,IAAId,MAAM,CAACc,GAAD,CAVtB;AAWH,KAZM,CAAP;AAaH;;AAfU,CAAf","sourcesContent":["import config from '../config';\nconst token = 'mockToken';\n\n\nexport default {\n    register(payload) {\n        return new Promise((resolve, reject) => {\n            fetch(`${config.apiRecord.domain}/register`, \n                {\n                    method: 'POST',\n                    headers: { 'content-type': 'application/json', 'Authorization': token },\n                    body: JSON.stringify({\n                        payload\n                    })\n                }\n            ).then(res => {\n                res.status === 200 ? resolve(res.json()) : reject(res);\n            }).catch(err => reject(err))\n        })\n    }\n};"]},"metadata":{},"sourceType":"module"}